// Generated by CodiumAI

import {AsyncStringPipe} from './async-string.pipe';

describe('AsyncStringPipe', () => {

  // Should return an empty string when given a null or undefined value
  it('should return an empty string when given a null value', () => {
    const pipe = new AsyncStringPipe();
    const result = pipe.transform(null);
    expect(result).toEqual('');
  });

  // Should return an empty string when given a null or undefined value
  it('should return an empty string when given an undefined value', () => {
    const pipe = new AsyncStringPipe();
    const result = pipe.transform(undefined);
    expect(result).toEqual('');
  });

  // Should return a string representation of a number when given a number
  it('should return a string representation of a number when given a number', () => {
    const pipe = new AsyncStringPipe();
    const result = pipe.transform(123);
    expect(result).toEqual('123');
  });

  // Should return the input string when given a non-empty string
  it('should return the input string when given a non-empty string', () => {
    const pipe = new AsyncStringPipe();
    const result = pipe.transform('hello');
    expect(result).toEqual('hello');
  });

  // Should return '0' when given the number 0
  it('should return "0" when given the number 0', () => {
      const pipe = new AsyncStringPipe();
      const result = pipe.transform(0);
      expect(result).toEqual('0');
    }
  )
  ;

  // Should return 'false' when given the boolean value false
  it('should return "false" when given the boolean value false', () => {
      const pipe = new AsyncStringPipe();
      const result = pipe.transform('false');
      expect(result).toEqual('false');
    }
  )
  ;

  // Should return 'true' when given the boolean value true
  it('should return "true" when given the boolean value true', () => {
      const pipe = new AsyncStringPipe();
      const result = pipe.transform('true');
      expect(result).toEqual('true');
    }
  )
  ;

});
